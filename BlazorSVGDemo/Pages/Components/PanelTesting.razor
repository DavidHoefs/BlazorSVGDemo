@page "/panel"
@using Svg
@using BlazorSVGDemo.Services

@if (_loaded)
{
    <div class="container">
        <div class="section">
            <div class="content">
                <RadzenPanel AllowCollapse="true">
                    <HeaderTemplate>
                        <h4 class="m-0 d-flex align-items-center">
                            <RadzenButton Text="Zoom IN"></RadzenButton>
                            <RadzenButton Text="Zoom Out"></RadzenButton>
                            <RadzenButton Text="right"></RadzenButton>
                            <RadzenButton Text="left"></RadzenButton>
                            <RadzenButton Text="down"></RadzenButton>
                            <RadzenButton Text="up"></RadzenButton>
                            <RadzenCheckBox Name="ShowMarkersCB" TValue="bool?"></RadzenCheckBox>
                        </h4>
                    </HeaderTemplate>
                </RadzenPanel>
            </div>
            <div id="scrollableContent" class="scrollable-content content">
                <svg xmlns="http://www.w3.org/2000/svg" data-cache="disabled" @ref="SvgReference" style="height: @_svgDoc.Height; width: @_svgDoc.Width;" data-src="@_pathForSvg" id="svg2" fill="@_svgDoc.Fill"> </svg>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}


<style>

    .container {
        background: lightgray;
        display: flex;
        flex-direction: column;
        /* give the outermost container a predefined size */
        /*position: absolute;*/
        /*top: 0;
        bottom: 0;
        left: 0;*/
        width: auto;
        z-index: -1;
    }

    .section {
        background: lightgray;
        display: flex;
        flex-direction: column;
        
  
        flex-grow: 1;
        margin: 10px;
  
        /* for Firefox */
        min-height: 0;
    }

    .content {
        background: #BBDEFB;
        margin: 2px;
    }

    .scrollable-content {
        background: white;
        flex-grow: 1;
  
        /* for Firefox */
        min-height: 0;
  
        overflow: scroll;
    }
</style>

@code {

    private bool _loaded;
    bool? Checked = true;
    private SvgDocument? _svgDoc;
    private string _pathForSvg = "";
    private ElementReference SvgReference { get; set; }
    private ElementReference MarkerSvgReference { get; set; }
    private double _x = 50;
    private double _y = 50;
    private List<MarkerModel> _markers = new();
    public string SvgSource { get; set; } = "mode.svg";


    protected override async Task OnInitializedAsync()
    {
        _pathForSvg = $@"Maps/{SvgSource}";
        if (Checked is true)
        {
            _markers = await SetupMarkers();
        }
        foreach (var marker in _markers)
        {
        SvgHelperService.AddMarker("wwwroot\\\\Maps\\\\mode.svg", marker.X.ToString(), marker.Y.ToString());
        }

        _svgDoc = SvgDocument.Open<SvgDocument>("wwwroot\\\\Maps\\\\mode.svg");

        _loaded = true;
        StateHasChanged();
    }

    private async Task<List<MarkerModel>> SetupMarkers()
    {
        var tempMarkers = new List<MarkerModel>();
        for (var i = 0; i < 10; i++)
        {
            var temp = new MarkerModel
                {
                    X = i * 10 + 100,
                    Y = i * 10 + 2 + 100,
                    Name = $"Marker {i.ToString()}"
                };
            tempMarkers.Add(temp);
        }
        return tempMarkers;
    }

    private record MarkerModel
    {
        public double X { get; init; }
        public double Y { get; init; }
        public string? Name { get; init; }
    }

}