@page "/svg"
@using Svg
@using SvgLibrary
@inject IJSRuntime JsRuntime


<div class="container-fluid svg-container">
    <div >
        <RadzenButton Click="@(args => ZoomIn())" Text="Zoom IN"></RadzenButton>
        <RadzenButton Click="@(args => ZoomOut())" Text="Zoom Out"></RadzenButton>
        <RadzenButton Click="@(args => Pan("right"))" Text=">"></RadzenButton>
        <RadzenButton Click="@(args => Pan("left"))" Text="<"></RadzenButton>
        <RadzenButton Click="@(args => Pan("down"))" Text="down"></RadzenButton>
        <RadzenButton Click="@(args => Pan("up"))" Text="up"></RadzenButton>
    </div>
    @if (_loaded)
    {
        <svg @ref="SvgReference" data-src="@pathForSvg" width="@svgDoc.Width" height="@svgDoc.Height" fill="@svgDoc.Fill" style="float: none; z-index: -1;"></svg>
    }
    else
    {
        <p>Loading SVG....</p>
    }
</div>


<style>
    #svg {
        float: right;
        z-index: -1;
    }

    .svg-container {
        align-content: center;
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        margin-top: 20px;
        padding: 5% 5% 5% 5%;
    }

    .header {
        align-content: center;
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        margin-top: 20px;
        padding: 0 70px;
    }
    
</style>

@code {
    private bool _loaded = false;
    private SvgDocument svgDoc;
    private string pathForSvg = "";
    private ElementReference SvgReference { get; set; }

    [Parameter]
    public string SvgSource { get; set; } = "C:\\Users\\David Hoefs\\OneDrive\\Desktop\\maptest.svg";

    protected override void OnInitialized()
    {
        pathForSvg = $@"Maps/{SvgSource}";
        svgDoc = SvgTest.TestSvg("C:\\Users\\David Hoefs\\OneDrive\\Desktop\\maptest.svg");
        _loaded = true;
        StateHasChanged();
    }

    private async void ZoomIn()
    {
        await JsRuntime.InvokeVoidAsync("ZoomIn", "in", SvgReference);
        StateHasChanged();
    }

    private async void ZoomOut()
    {
        await JsRuntime.InvokeVoidAsync("ZoomIn", "out", SvgReference);
        StateHasChanged();
    }

    private async void Pan(string direction)
    {
        await JsRuntime.InvokeVoidAsync("pan", SvgReference, direction);
        StateHasChanged();
    }

}