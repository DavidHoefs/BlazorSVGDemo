@page "/svg"
@using BlazorSVGDemo.Services
@using Svg
@inject IJSRuntime JsRuntime
@inject MouseService MouseSrv;

<div>
    <RadzenButton Click="@(args => ZoomIn())" Text="Zoom IN"></RadzenButton>
    <RadzenButton Click="@(args => ZoomOut())" Text="Zoom Out"></RadzenButton>
    <RadzenButton Click="@(args => Pan("right"))" Text=">"></RadzenButton>
    <RadzenButton Click="@(args => Pan("left"))" Text="<"></RadzenButton>
    <RadzenButton Click="@(args => Pan("down"))" Text="down"></RadzenButton>
    <RadzenButton Click="@(args => Pan("up"))" Text="up"></RadzenButton>
</div>
<div class="container-fluid svg-container">

    @if (_loaded)
    {
        <svg xmlns="http://www.w3.org/2000/svg" width="@_svgDoc.Width" height="@_svgDoc.Height" @onmousemove=@(e => MouseSrv.FireMove(this, e)) @onmouseup=@(e => MouseSrv.FireUp(this, e))>
            <Draggable @bind-X=_x @bind-Y=_y>
                <circle r="6" stroke="black" class="Markers" stroke-width="1" fill="gray"/>
            </Draggable>
            @foreach (var marker in markers)
            {
                <g>
                    <circle id="@marker.name" class="Markers" fill="red" transform="translate(@marker.x,@marker.y)" r="6" stroke="black" stroke-width="1"/>
                </g>
            }
        </svg>
        <svg @ref="SvgReference" data-src="@_pathForSvg" width="@_svgDoc.Width" height="@_svgDoc.Height" id="svg" fill="@_svgDoc.Fill">

        </svg>
    }
    else
    {
        <p>Loading SVG....</p>
    }
</div>
<style>
    .Markers:hover {
        cursor: pointer;
        fill: white !important;
    }

    .deleteMarkers:hover {
        cursor: pointer;
        fill: white !important;
    }

    p {
        margin: 0;
        padding: 0;
    }

    /*This is to prevent text highlighting when dragging*/

    .dragtext {
        -moz-user-select: none;
        -ms-user-select: none;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        user-select: none;
    }
</style>

@code {
    private bool _loaded = false;
    private SvgDocument? _svgDoc;
    private string _pathForSvg = "";
    private ElementReference SvgReference { get; set; }
    private double _x = 50;
    private double _y = 50;
    private List<MarkerModel> markers = new();

    [Parameter]
    public string SvgSource { get; set; } = "C:\\Users\\David Hoefs\\OneDrive\\Desktop\\maptest.svg";

    protected override async Task OnInitializedAsync()
    {
        _pathForSvg = $@"Maps/{SvgSource}";
        markers = await SetupMarkers();
        _svgDoc = SvgDocument.Open<SvgDocument>("C:\\\\Users\\\\David Hoefs\\\\OneDrive\\\\Desktop\\\\maptest.svg");
        _loaded = true;
        StateHasChanged();
    }

    private async Task<List<MarkerModel>> SetupMarkers()
    {
        var tempMarkers = new List<MarkerModel>();
        for (var i = 0; i < 10; i++)
        {
            var temp = new MarkerModel();
            temp.x = i * 10;
            temp.y = i * 10 + 2;
            temp.name = $"Marker {i.ToString()}";
            tempMarkers.Add(temp);
        }
        return tempMarkers;
    }

    private async void ZoomIn()
    {
        await JsRuntime.InvokeVoidAsync("ZoomIn", "in", SvgReference);
        StateHasChanged();
    }

    private async void ZoomOut()
    {
        await JsRuntime.InvokeVoidAsync("ZoomIn", "out", SvgReference);
        StateHasChanged();
    }

    private async void Pan(string direction)
    {
        await JsRuntime.InvokeVoidAsync("pan", SvgReference, direction);
        StateHasChanged();
    }

    public struct MarkerModel
    {
        public double x { get; set; }
        public double y { get; set; }
        public string name { get; set; }
    }

}